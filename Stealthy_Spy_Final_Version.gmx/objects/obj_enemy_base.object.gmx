<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_lifeform_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

boss = 0;
idle = 0;
follow_player = 0;
image_index=0;
image_speed=0;
udlr_dir = 0; //direction: up,down,left,right
spd = 2;
phy_angular_velocity = 0;
angle_to_rotate = 0;
facing_direction = -90;
my_target = instance_create(x, y, obj_Follow_Target1);
move_speed = 0;
slow_factor = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow Target

move_speed = spd/slow_factor;

if (my_path != -1){
  if (boss == 1)
  {
    dist_player = point_distance(obj_player.phy_position_x, obj_player.phy_position_y, phy_position_x, phy_position_y);
    if (dist_player &lt; 150 &amp;&amp; obj_player.hidden == 0 &amp;&amp; obj_player.hidden_box == 0 &amp;&amp; obj_player.cloak == 0) {
      follow_player = 1;
    }
    else {
      follow_player = 0;
    }
  }
  if (follow_player == 0 &amp;&amp; idle == 0)
  {
    dir = point_direction(my_target.x, my_target.y, phy_position_x, phy_position_y);
    dist = point_distance(my_target.x, my_target.y, phy_position_x, phy_position_y);
    dx = lengthdir_x(move_speed, dir);
    dy = lengthdir_y(move_speed, dir);
  }
  else if (follow_player == 1)
  {
    dir = point_direction(obj_player.phy_position_x, obj_player.phy_position_y, phy_position_x, phy_position_y);
    dist = point_distance(obj_player.phy_position_x, obj_player.phy_position_y, phy_position_x, phy_position_y);
    dx = lengthdir_x(move_speed, dir);
    dy = lengthdir_y(move_speed, dir);
  }
  else
  {
    dir = facing_direction;
    dx = 0;
    dy = 0;
  }
  phy_position_x -= dx;
  phy_position_y -= dy;
}

//Face direction
angle_to_rotate = facing_direction - dir;
//phy_rotation += angle_to_rotate;
facing_direction -= angle_to_rotate;

if (facing_direction &gt;= 45) and (facing_direction &lt; 135)
{
  udlr_dir = 0; //down
}
else if (facing_direction &gt;= 135) and (facing_direction &lt; 225)
{
  udlr_dir = 1; //right
}
else if (facing_direction &gt;= 225) and (facing_direction &lt; 315)
{
  udlr_dir = 2; //up
}
else
{
  udlr_dir = 3; //left
}
//show_debug_message("idle : " + string(idle));
//show_debug_message("follow_player : " + string(follow_player));
if (idle == 1) and (follow_player == 0)
{
  udlr_dir = 4;
  //show_debug_message("uldr is 4");
}

if (boss == 1)
{
  switch (udlr_dir)
  {
    case 0:
      sprite_index = spr_boss_front;
      image_speed = 1;
      break;
    case 1:
      sprite_index = spr_boss_right;
      image_speed = 1;
      break;
    case 2:
      sprite_index = spr_boss_back;
      image_speed = 1;
      break;
    case 3:
      sprite_index = spr_boss_left;
      image_speed = 1;
      break;
    case 4:
      image_speed = 0;
      sprite_index = spr_boss_front;
      image_index = 1;
      break;
  }
}
else
{
  switch (udlr_dir)
  {
    case 0:
      sprite_index = spr_enemy_front;
      image_speed = 1;
      break;
    case 1:
      sprite_index = spr_enemy_right;
      image_speed = 1;
      break;
    case 2:
      sprite_index = spr_enemy_back;
      image_speed = 1;
      break;
    case 3:
      sprite_index = spr_enemy_left;
      image_speed = 1;
      break;
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other{
  instance_destroy();
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_box">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_desk">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_exit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Restore Speed
//show_message("Action called. path speed to be adjusted to : " + string(spd/slow_factor));
with(my_target){
  //path_start(path, speed, endaction, absolute);
  //endaction: stop, restart, continue, reverse
  path_speed = other.spd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Slow Down
//show_message("Action called. path speed to be adjusted to : " + string(spd/slow_factor));
with(my_target){
  //path_start(path, speed, endaction, absolute);
  //endaction: stop, restart, continue, reverse
  path_speed = other.spd/other.slow_factor;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start the target path.
with(my_target){
  //path_start(path, speed, endaction, absolute);
  //endaction: stop, restart, continue, reverse
  path_start(other.my_path,other.spd,2,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (follow_player == 1) 
{
  draw_sprite(spr_found, 0, phy_position_x, phy_position_y);
}

if (slow_factor &gt; 1)
{
  draw_sprite(spr_down_arrow, 0, phy_position_x, phy_position_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
